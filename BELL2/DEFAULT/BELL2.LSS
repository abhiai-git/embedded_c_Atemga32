
bell2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002e4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000338  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000081  00000000  00000000  00000358  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000586  00000000  00000000  000003d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000019e  00000000  00000000  0000095f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000004de  00000000  00000000  00000afd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  000000a0  00000000  00000000  00000fdc  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000f6  00000000  00000000  0000107c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000001aa  00000000  00000000  00001172  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  0000131c  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ee       	ldi	r30, 0xE4	; 228
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 bc 00 	call	0x178	; 0x178 <main>
  8a:	0c 94 70 01 	jmp	0x2e0	; 0x2e0 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_cmd>:
{
	dis_cmd(0X01);
}

void LCD_cmd(unsigned char item)
{
  92:	82 bb       	out	0x12, r24	; 18
	PORTD=item;
	PORTD &=~(1<<RS);
  94:	90 98       	cbi	0x12, 0	; 18
	PORTD &=~(1<<RW);
  96:	91 98       	cbi	0x12, 1	; 18
	PORTD |= (1<<EN);
  98:	92 9a       	sbi	0x12, 2	; 18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  9a:	8a ef       	ldi	r24, 0xFA	; 250
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	01 97       	sbiw	r24, 0x01	; 1
  a0:	f1 f7       	brne	.-4      	; 0x9e <LCD_cmd+0xc>
	_delay_ms(1);
	PORTD &= ~(1<<EN);
  a2:	92 98       	cbi	0x12, 2	; 18
}
  a4:	08 95       	ret

000000a6 <LCD_data>:

void LCD_data(unsigned char item)
{
  a6:	82 bb       	out	0x12, r24	; 18
	PORTD=item;
	PORTD |= (1<<RS);
  a8:	90 9a       	sbi	0x12, 0	; 18
	PORTD &=~(1<<RW);
  aa:	91 98       	cbi	0x12, 1	; 18
	PORTD |= (1<<EN);
  ac:	92 9a       	sbi	0x12, 2	; 18
  ae:	8a ef       	ldi	r24, 0xFA	; 250
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	01 97       	sbiw	r24, 0x01	; 1
  b4:	f1 f7       	brne	.-4      	; 0xb2 <LCD_data+0xc>
	_delay_ms(1);
	PORTD &= ~(1<<EN);
  b6:	92 98       	cbi	0x12, 2	; 18
}
  b8:	08 95       	ret

000000ba <dis_data>:

void dis_data(unsigned char item)
{
  ba:	28 2f       	mov	r18, r24
  bc:	20 7f       	andi	r18, 0xF0	; 240
	PORTD &= ~(1<<EN);
}

void LCD_data(unsigned char item)
{
	PORTD=item;
  be:	22 bb       	out	0x12, r18	; 18
	PORTD |= (1<<RS);
  c0:	90 9a       	sbi	0x12, 0	; 18
	PORTD &=~(1<<RW);
  c2:	91 98       	cbi	0x12, 1	; 18
	PORTD |= (1<<EN);
  c4:	92 9a       	sbi	0x12, 2	; 18
  c6:	2a ef       	ldi	r18, 0xFA	; 250
  c8:	30 e0       	ldi	r19, 0x00	; 0
  ca:	f9 01       	movw	r30, r18
  cc:	31 97       	sbiw	r30, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <dis_data+0x12>
	_delay_ms(1);
	PORTD &= ~(1<<EN);
  d0:	92 98       	cbi	0x12, 2	; 18
  d2:	f9 01       	movw	r30, r18
  d4:	31 97       	sbiw	r30, 0x01	; 1
  d6:	f1 f7       	brne	.-4      	; 0xd4 <dis_data+0x1a>
{
	unsigned char value;
	value = item & 0XF0;
	LCD_data(value);
	_delay_ms(1);
	value=(item << 4) & 0xF0;
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	44 e0       	ldi	r20, 0x04	; 4
  dc:	88 0f       	add	r24, r24
  de:	99 1f       	adc	r25, r25
  e0:	4a 95       	dec	r20
  e2:	e1 f7       	brne	.-8      	; 0xdc <dis_data+0x22>
	PORTD &= ~(1<<EN);
}

void LCD_data(unsigned char item)
{
	PORTD=item;
  e4:	82 bb       	out	0x12, r24	; 18
	PORTD |= (1<<RS);
  e6:	90 9a       	sbi	0x12, 0	; 18
	PORTD &=~(1<<RW);
  e8:	91 98       	cbi	0x12, 1	; 18
	PORTD |= (1<<EN);
  ea:	92 9a       	sbi	0x12, 2	; 18
  ec:	c9 01       	movw	r24, r18
  ee:	01 97       	sbiw	r24, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <dis_data+0x34>
	_delay_ms(1);
	PORTD &= ~(1<<EN);
  f2:	92 98       	cbi	0x12, 2	; 18
	value = item & 0XF0;
	LCD_data(value);
	_delay_ms(1);
	value=(item << 4) & 0xF0;
	LCD_data(value);
}
  f4:	08 95       	ret

000000f6 <dis_cmd>:

void dis_cmd(unsigned char item)
{
  f6:	28 2f       	mov	r18, r24
  f8:	20 7f       	andi	r18, 0xF0	; 240
	dis_cmd(0X01);
}

void LCD_cmd(unsigned char item)
{
	PORTD=item;
  fa:	22 bb       	out	0x12, r18	; 18
	PORTD &=~(1<<RS);
  fc:	90 98       	cbi	0x12, 0	; 18
	PORTD &=~(1<<RW);
  fe:	91 98       	cbi	0x12, 1	; 18
	PORTD |= (1<<EN);
 100:	92 9a       	sbi	0x12, 2	; 18
 102:	2a ef       	ldi	r18, 0xFA	; 250
 104:	30 e0       	ldi	r19, 0x00	; 0
 106:	f9 01       	movw	r30, r18
 108:	31 97       	sbiw	r30, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <dis_cmd+0x12>
	_delay_ms(1);
	PORTD &= ~(1<<EN);
 10c:	92 98       	cbi	0x12, 2	; 18
 10e:	f9 01       	movw	r30, r18
 110:	31 97       	sbiw	r30, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <dis_cmd+0x1a>
{
	unsigned char value;
	value = item & 0XF0;
	LCD_cmd(value);
	_delay_ms(1);
	value=(item << 4) & 0xF0;
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	54 e0       	ldi	r21, 0x04	; 4
 118:	88 0f       	add	r24, r24
 11a:	99 1f       	adc	r25, r25
 11c:	5a 95       	dec	r21
 11e:	e1 f7       	brne	.-8      	; 0x118 <dis_cmd+0x22>
	dis_cmd(0X01);
}

void LCD_cmd(unsigned char item)
{
	PORTD=item;
 120:	82 bb       	out	0x12, r24	; 18
	PORTD &=~(1<<RS);
 122:	90 98       	cbi	0x12, 0	; 18
	PORTD &=~(1<<RW);
 124:	91 98       	cbi	0x12, 1	; 18
	PORTD |= (1<<EN);
 126:	92 9a       	sbi	0x12, 2	; 18
 128:	c9 01       	movw	r24, r18
 12a:	01 97       	sbiw	r24, 0x01	; 1
 12c:	f1 f7       	brne	.-4      	; 0x12a <dis_cmd+0x34>
	_delay_ms(1);
	PORTD &= ~(1<<EN);
 12e:	92 98       	cbi	0x12, 2	; 18
	value = item & 0XF0;
	LCD_cmd(value);
	_delay_ms(1);
	value=(item << 4) & 0xF0;
	LCD_cmd(value);
}
 130:	08 95       	ret

00000132 <LCD_clr>:


	return 0;
}
void LCD_clr(void)
{
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	0e 94 7b 00 	call	0xf6	; 0xf6 <dis_cmd>
	dis_cmd(0X01);
}
 138:	08 95       	ret

0000013a <LCD_init>:
	value=(item << 4) & 0xF0;
	LCD_cmd(value);
}

void LCD_init()
{
 13a:	0f 93       	push	r16
 13c:	1f 93       	push	r17
	dis_cmd(0x02);
 13e:	82 e0       	ldi	r24, 0x02	; 2
 140:	0e 94 7b 00 	call	0xf6	; 0xf6 <dis_cmd>
	dis_cmd(0x28);
 144:	88 e2       	ldi	r24, 0x28	; 40
 146:	0e 94 7b 00 	call	0xf6	; 0xf6 <dis_cmd>
 14a:	0a ef       	ldi	r16, 0xFA	; 250
 14c:	10 e0       	ldi	r17, 0x00	; 0
 14e:	c8 01       	movw	r24, r16
 150:	01 97       	sbiw	r24, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <LCD_init+0x16>
	_delay_ms(1);
	//dis_cmd(0x01);
	_delay_ms(1);
	dis_cmd(0x0C);
 154:	c8 01       	movw	r24, r16
 156:	01 97       	sbiw	r24, 0x01	; 1
 158:	f1 f7       	brne	.-4      	; 0x156 <LCD_init+0x1c>
 15a:	8c e0       	ldi	r24, 0x0C	; 12
 15c:	0e 94 7b 00 	call	0xf6	; 0xf6 <dis_cmd>
 160:	c8 01       	movw	r24, r16
 162:	01 97       	sbiw	r24, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <LCD_init+0x28>
	_delay_ms(1);
	dis_cmd(0X06);
 166:	86 e0       	ldi	r24, 0x06	; 6
 168:	0e 94 7b 00 	call	0xf6	; 0xf6 <dis_cmd>
	dis_cmd(0x80);
 16c:	80 e8       	ldi	r24, 0x80	; 128
 16e:	0e 94 7b 00 	call	0xf6	; 0xf6 <dis_cmd>
	
}
 172:	1f 91       	pop	r17
 174:	0f 91       	pop	r16
 176:	08 95       	ret

00000178 <main>:
void LCD_init(void);
void LCD_string(unsigned char *);
void LCD_num(unsigned int);

int main()
{	DDRD=0b11111111;	
 178:	cf 93       	push	r28
 17a:	df 93       	push	r29
 17c:	8f ef       	ldi	r24, 0xFF	; 255
 17e:	81 bb       	out	0x11, r24	; 17
	LCD_init();
 180:	0e 94 9d 00 	call	0x13a	; 0x13a <LCD_init>
 184:	c9 e1       	ldi	r28, 0x19	; 25
 186:	d0 e0       	ldi	r29, 0x00	; 0
//is_cmd(0x01);

	while(1)
	{	
		dis_cmd(0x48);
 188:	88 e4       	ldi	r24, 0x48	; 72
 18a:	0e 94 7b 00 	call	0xf6	; 0xf6 <dis_cmd>
		dis_data(0x04);
 18e:	84 e0       	ldi	r24, 0x04	; 4
 190:	0e 94 5d 00 	call	0xba	; 0xba <dis_data>
		dis_data(0x0e);
 194:	8e e0       	ldi	r24, 0x0E	; 14
 196:	0e 94 5d 00 	call	0xba	; 0xba <dis_data>
		dis_data(0x0e);
 19a:	8e e0       	ldi	r24, 0x0E	; 14
 19c:	0e 94 5d 00 	call	0xba	; 0xba <dis_data>
		dis_data(0x0e);
 1a0:	8e e0       	ldi	r24, 0x0E	; 14
 1a2:	0e 94 5d 00 	call	0xba	; 0xba <dis_data>
		dis_data(0x1f);
 1a6:	8f e1       	ldi	r24, 0x1F	; 31
 1a8:	0e 94 5d 00 	call	0xba	; 0xba <dis_data>
		dis_data(0x00);
 1ac:	80 e0       	ldi	r24, 0x00	; 0
 1ae:	0e 94 5d 00 	call	0xba	; 0xba <dis_data>
		dis_data(0x04);
 1b2:	84 e0       	ldi	r24, 0x04	; 4
 1b4:	0e 94 5d 00 	call	0xba	; 0xba <dis_data>
		dis_cmd(0xc9);
 1b8:	89 ec       	ldi	r24, 0xC9	; 201
 1ba:	0e 94 7b 00 	call	0xf6	; 0xf6 <dis_cmd>
		dis_data(0);
 1be:	80 e0       	ldi	r24, 0x00	; 0
 1c0:	0e 94 5d 00 	call	0xba	; 0xba <dis_data>
 1c4:	80 e3       	ldi	r24, 0x30	; 48
 1c6:	95 e7       	ldi	r25, 0x75	; 117
 1c8:	fe 01       	movw	r30, r28
 1ca:	31 97       	sbiw	r30, 0x01	; 1
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <main+0x52>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1ce:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1d0:	d9 f7       	brne	.-10     	; 0x1c8 <main+0x50>

		_delay_ms(3000);
		dis_data(0x01);
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	0e 94 5d 00 	call	0xba	; 0xba <dis_data>
		
		dis_cmd(0x50);
 1d8:	80 e5       	ldi	r24, 0x50	; 80
 1da:	0e 94 7b 00 	call	0xf6	; 0xf6 <dis_cmd>
		dis_data(0x04);
 1de:	84 e0       	ldi	r24, 0x04	; 4
 1e0:	0e 94 5d 00 	call	0xba	; 0xba <dis_data>
		dis_data(0x0e);
 1e4:	8e e0       	ldi	r24, 0x0E	; 14
 1e6:	0e 94 5d 00 	call	0xba	; 0xba <dis_data>
		dis_data(0x0e);
 1ea:	8e e0       	ldi	r24, 0x0E	; 14
 1ec:	0e 94 5d 00 	call	0xba	; 0xba <dis_data>
		dis_data(0x0e);
 1f0:	8e e0       	ldi	r24, 0x0E	; 14
 1f2:	0e 94 5d 00 	call	0xba	; 0xba <dis_data>
		dis_data(0x1f);
 1f6:	8f e1       	ldi	r24, 0x1F	; 31
 1f8:	0e 94 5d 00 	call	0xba	; 0xba <dis_data>
		dis_data(0x00);
 1fc:	80 e0       	ldi	r24, 0x00	; 0
 1fe:	0e 94 5d 00 	call	0xba	; 0xba <dis_data>
		dis_data(0x04);
 202:	84 e0       	ldi	r24, 0x04	; 4
 204:	0e 94 5d 00 	call	0xba	; 0xba <dis_data>
		dis_cmd(0xc9);
 208:	89 ec       	ldi	r24, 0xC9	; 201
 20a:	0e 94 7b 00 	call	0xf6	; 0xf6 <dis_cmd>
		dis_data(0);
 20e:	80 e0       	ldi	r24, 0x00	; 0
 210:	0e 94 5d 00 	call	0xba	; 0xba <dis_data>
 214:	80 e3       	ldi	r24, 0x30	; 48
 216:	95 e7       	ldi	r25, 0x75	; 117
 218:	fe 01       	movw	r30, r28
 21a:	31 97       	sbiw	r30, 0x01	; 1
 21c:	f1 f7       	brne	.-4      	; 0x21a <main+0xa2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 21e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 220:	d9 f7       	brne	.-10     	; 0x218 <main+0xa0>

		
		_delay_ms(3000);
		dis_data(0x01);
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	0e 94 5d 00 	call	0xba	; 0xba <dis_data>
			dis_cmd(0x52);
 228:	82 e5       	ldi	r24, 0x52	; 82
 22a:	0e 94 7b 00 	call	0xf6	; 0xf6 <dis_cmd>
		dis_data(0x04);
 22e:	84 e0       	ldi	r24, 0x04	; 4
 230:	0e 94 5d 00 	call	0xba	; 0xba <dis_data>
		dis_data(0x0e);
 234:	8e e0       	ldi	r24, 0x0E	; 14
 236:	0e 94 5d 00 	call	0xba	; 0xba <dis_data>
		dis_data(0x0e);
 23a:	8e e0       	ldi	r24, 0x0E	; 14
 23c:	0e 94 5d 00 	call	0xba	; 0xba <dis_data>
		dis_data(0x0e);
 240:	8e e0       	ldi	r24, 0x0E	; 14
 242:	0e 94 5d 00 	call	0xba	; 0xba <dis_data>
		dis_data(0x1f);
 246:	8f e1       	ldi	r24, 0x1F	; 31
 248:	0e 94 5d 00 	call	0xba	; 0xba <dis_data>
		dis_data(0x00);
 24c:	80 e0       	ldi	r24, 0x00	; 0
 24e:	0e 94 5d 00 	call	0xba	; 0xba <dis_data>
		dis_data(0x05);
 252:	85 e0       	ldi	r24, 0x05	; 5
 254:	0e 94 5d 00 	call	0xba	; 0xba <dis_data>
		dis_cmd(0xc9);
 258:	89 ec       	ldi	r24, 0xC9	; 201
 25a:	0e 94 7b 00 	call	0xf6	; 0xf6 <dis_cmd>
		dis_data(0);
 25e:	80 e0       	ldi	r24, 0x00	; 0
 260:	0e 94 5d 00 	call	0xba	; 0xba <dis_data>
 264:	91 cf       	rjmp	.-222    	; 0x188 <main+0x10>

00000266 <LCD_string>:
	dis_cmd(0x80);
	
}

void LCD_string(unsigned char *str)
{
 266:	cf 93       	push	r28
 268:	df 93       	push	r29
 26a:	ec 01       	movw	r28, r24
 26c:	02 c0       	rjmp	.+4      	; 0x272 <LCD_string+0xc>
	unsigned int x=0;
	
	while(str[x]!='\0')
	{
	dis_data(str[x]);
 26e:	0e 94 5d 00 	call	0xba	; 0xba <dis_data>

void LCD_string(unsigned char *str)
{
	unsigned int x=0;
	
	while(str[x]!='\0')
 272:	89 91       	ld	r24, Y+
 274:	88 23       	and	r24, r24
 276:	d9 f7       	brne	.-10     	; 0x26e <LCD_string+0x8>
	{
	dis_data(str[x]);
	x++;
	}
}
 278:	df 91       	pop	r29
 27a:	cf 91       	pop	r28
 27c:	08 95       	ret

0000027e <LCD_num>:
void LCD_num(unsigned int data)
{
 27e:	cf 93       	push	r28
 280:	df 93       	push	r29
 282:	ec 01       	movw	r28, r24
unsigned int val;
dis_cmd(0x04);
 284:	84 e0       	ldi	r24, 0x04	; 4
 286:	0e 94 7b 00 	call	0xf6	; 0xf6 <dis_cmd>
 28a:	0e c0       	rjmp	.+28     	; 0x2a8 <LCD_num+0x2a>
	while(data!=0)
	{
		val=data%10;
		dis_data(val+48);
 28c:	ce 01       	movw	r24, r28
 28e:	6a e0       	ldi	r22, 0x0A	; 10
 290:	70 e0       	ldi	r23, 0x00	; 0
 292:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <__udivmodhi4>
 296:	80 5d       	subi	r24, 0xD0	; 208
 298:	0e 94 5d 00 	call	0xba	; 0xba <dis_data>
		data=data/10;
 29c:	ce 01       	movw	r24, r28
 29e:	6a e0       	ldi	r22, 0x0A	; 10
 2a0:	70 e0       	ldi	r23, 0x00	; 0
 2a2:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <__udivmodhi4>
 2a6:	eb 01       	movw	r28, r22
}
void LCD_num(unsigned int data)
{
unsigned int val;
dis_cmd(0x04);
	while(data!=0)
 2a8:	20 97       	sbiw	r28, 0x00	; 0
 2aa:	81 f7       	brne	.-32     	; 0x28c <LCD_num+0xe>
	{
		val=data%10;
		dis_data(val+48);
		data=data/10;
	}
dis_cmd(0x06);
 2ac:	86 e0       	ldi	r24, 0x06	; 6
 2ae:	0e 94 7b 00 	call	0xf6	; 0xf6 <dis_cmd>
} 
 2b2:	df 91       	pop	r29
 2b4:	cf 91       	pop	r28
 2b6:	08 95       	ret

000002b8 <__udivmodhi4>:
 2b8:	aa 1b       	sub	r26, r26
 2ba:	bb 1b       	sub	r27, r27
 2bc:	51 e1       	ldi	r21, 0x11	; 17
 2be:	07 c0       	rjmp	.+14     	; 0x2ce <__udivmodhi4_ep>

000002c0 <__udivmodhi4_loop>:
 2c0:	aa 1f       	adc	r26, r26
 2c2:	bb 1f       	adc	r27, r27
 2c4:	a6 17       	cp	r26, r22
 2c6:	b7 07       	cpc	r27, r23
 2c8:	10 f0       	brcs	.+4      	; 0x2ce <__udivmodhi4_ep>
 2ca:	a6 1b       	sub	r26, r22
 2cc:	b7 0b       	sbc	r27, r23

000002ce <__udivmodhi4_ep>:
 2ce:	88 1f       	adc	r24, r24
 2d0:	99 1f       	adc	r25, r25
 2d2:	5a 95       	dec	r21
 2d4:	a9 f7       	brne	.-22     	; 0x2c0 <__udivmodhi4_loop>
 2d6:	80 95       	com	r24
 2d8:	90 95       	com	r25
 2da:	bc 01       	movw	r22, r24
 2dc:	cd 01       	movw	r24, r26
 2de:	08 95       	ret

000002e0 <_exit>:
 2e0:	f8 94       	cli

000002e2 <__stop_program>:
 2e2:	ff cf       	rjmp	.-2      	; 0x2e2 <__stop_program>
