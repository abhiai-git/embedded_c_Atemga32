
Distancemeasure.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000340  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000fa  00800060  00000340  000003b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  000004ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000009b  00000000  00000000  000004ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000062a  00000000  00000000  00000569  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001e9  00000000  00000000  00000b93  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000540  00000000  00000000  00000d7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000c0  00000000  00000000  000012bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000126  00000000  00000000  0000137c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000025d  00000000  00000000  000014a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000a8  00000000  00000000  000016ff  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e4       	ldi	r30, 0x40	; 64
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	aa 35       	cpi	r26, 0x5A	; 90
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	aa e5       	ldi	r26, 0x5A	; 90
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 35       	cpi	r26, 0x5A	; 90
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 e5 00 	call	0x1ca	; 0x1ca <main>
  8a:	0c 94 9e 01 	jmp	0x33c	; 0x33c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000092 <LCD_cmd>:
{
	dis_cmd(0X01);
}

void LCD_cmd(unsigned char item)
{
  92:	82 bb       	out	0x12, r24	; 18
	PORTD=item;
	PORTD &=~(1<<RS);
  94:	90 98       	cbi	0x12, 0	; 18
	PORTD &=~(1<<RW);
  96:	91 98       	cbi	0x12, 1	; 18
	PORTD |= (1<<EN);
  98:	92 9a       	sbi	0x12, 2	; 18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  9a:	8a ef       	ldi	r24, 0xFA	; 250
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	01 97       	sbiw	r24, 0x01	; 1
  a0:	f1 f7       	brne	.-4      	; 0x9e <LCD_cmd+0xc>
	_delay_ms(1);
	PORTD &= ~(1<<EN);
  a2:	92 98       	cbi	0x12, 2	; 18
}
  a4:	08 95       	ret

000000a6 <LCD_data>:

void LCD_data(unsigned char item)
{
  a6:	82 bb       	out	0x12, r24	; 18
	PORTD=item;
	PORTD |= (1<<RS);
  a8:	90 9a       	sbi	0x12, 0	; 18
	PORTD &=~(1<<RW);
  aa:	91 98       	cbi	0x12, 1	; 18
	PORTD |= (1<<EN);
  ac:	92 9a       	sbi	0x12, 2	; 18
  ae:	8a ef       	ldi	r24, 0xFA	; 250
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	01 97       	sbiw	r24, 0x01	; 1
  b4:	f1 f7       	brne	.-4      	; 0xb2 <LCD_data+0xc>
	_delay_ms(1);
	PORTD &= ~(1<<EN);
  b6:	92 98       	cbi	0x12, 2	; 18
}
  b8:	08 95       	ret

000000ba <dis_data>:

void dis_data(unsigned char item)
{
  ba:	28 2f       	mov	r18, r24
  bc:	20 7f       	andi	r18, 0xF0	; 240
	PORTD &= ~(1<<EN);
}

void LCD_data(unsigned char item)
{
	PORTD=item;
  be:	22 bb       	out	0x12, r18	; 18
	PORTD |= (1<<RS);
  c0:	90 9a       	sbi	0x12, 0	; 18
	PORTD &=~(1<<RW);
  c2:	91 98       	cbi	0x12, 1	; 18
	PORTD |= (1<<EN);
  c4:	92 9a       	sbi	0x12, 2	; 18
  c6:	2a ef       	ldi	r18, 0xFA	; 250
  c8:	30 e0       	ldi	r19, 0x00	; 0
  ca:	f9 01       	movw	r30, r18
  cc:	31 97       	sbiw	r30, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <dis_data+0x12>
	_delay_ms(1);
	PORTD &= ~(1<<EN);
  d0:	92 98       	cbi	0x12, 2	; 18
  d2:	f9 01       	movw	r30, r18
  d4:	31 97       	sbiw	r30, 0x01	; 1
  d6:	f1 f7       	brne	.-4      	; 0xd4 <dis_data+0x1a>
{
	unsigned char value;
	value = item & 0XF0;
	LCD_data(value);
	_delay_ms(1);
	value=(item << 4) & 0xF0;
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	44 e0       	ldi	r20, 0x04	; 4
  dc:	88 0f       	add	r24, r24
  de:	99 1f       	adc	r25, r25
  e0:	4a 95       	dec	r20
  e2:	e1 f7       	brne	.-8      	; 0xdc <dis_data+0x22>
	PORTD &= ~(1<<EN);
}

void LCD_data(unsigned char item)
{
	PORTD=item;
  e4:	82 bb       	out	0x12, r24	; 18
	PORTD |= (1<<RS);
  e6:	90 9a       	sbi	0x12, 0	; 18
	PORTD &=~(1<<RW);
  e8:	91 98       	cbi	0x12, 1	; 18
	PORTD |= (1<<EN);
  ea:	92 9a       	sbi	0x12, 2	; 18
  ec:	c9 01       	movw	r24, r18
  ee:	01 97       	sbiw	r24, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <dis_data+0x34>
	_delay_ms(1);
	PORTD &= ~(1<<EN);
  f2:	92 98       	cbi	0x12, 2	; 18
	value = item & 0XF0;
	LCD_data(value);
	_delay_ms(1);
	value=(item << 4) & 0xF0;
	LCD_data(value);
}
  f4:	08 95       	ret

000000f6 <dis_cmd>:

void dis_cmd(unsigned char item)
{
  f6:	28 2f       	mov	r18, r24
  f8:	20 7f       	andi	r18, 0xF0	; 240
	dis_cmd(0X01);
}

void LCD_cmd(unsigned char item)
{
	PORTD=item;
  fa:	22 bb       	out	0x12, r18	; 18
	PORTD &=~(1<<RS);
  fc:	90 98       	cbi	0x12, 0	; 18
	PORTD &=~(1<<RW);
  fe:	91 98       	cbi	0x12, 1	; 18
	PORTD |= (1<<EN);
 100:	92 9a       	sbi	0x12, 2	; 18
 102:	2a ef       	ldi	r18, 0xFA	; 250
 104:	30 e0       	ldi	r19, 0x00	; 0
 106:	f9 01       	movw	r30, r18
 108:	31 97       	sbiw	r30, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <dis_cmd+0x12>
	_delay_ms(1);
	PORTD &= ~(1<<EN);
 10c:	92 98       	cbi	0x12, 2	; 18
 10e:	f9 01       	movw	r30, r18
 110:	31 97       	sbiw	r30, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <dis_cmd+0x1a>
{
	unsigned char value;
	value = item & 0XF0;
	LCD_cmd(value);
	_delay_ms(1);
	value=(item << 4) & 0xF0;
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	54 e0       	ldi	r21, 0x04	; 4
 118:	88 0f       	add	r24, r24
 11a:	99 1f       	adc	r25, r25
 11c:	5a 95       	dec	r21
 11e:	e1 f7       	brne	.-8      	; 0x118 <dis_cmd+0x22>
	dis_cmd(0X01);
}

void LCD_cmd(unsigned char item)
{
	PORTD=item;
 120:	82 bb       	out	0x12, r24	; 18
	PORTD &=~(1<<RS);
 122:	90 98       	cbi	0x12, 0	; 18
	PORTD &=~(1<<RW);
 124:	91 98       	cbi	0x12, 1	; 18
	PORTD |= (1<<EN);
 126:	92 9a       	sbi	0x12, 2	; 18
 128:	c9 01       	movw	r24, r18
 12a:	01 97       	sbiw	r24, 0x01	; 1
 12c:	f1 f7       	brne	.-4      	; 0x12a <dis_cmd+0x34>
	_delay_ms(1);
	PORTD &= ~(1<<EN);
 12e:	92 98       	cbi	0x12, 2	; 18
	value = item & 0XF0;
	LCD_cmd(value);
	_delay_ms(1);
	value=(item << 4) & 0xF0;
	LCD_cmd(value);
}
 130:	08 95       	ret

00000132 <LCD_clr>:
		}
return 0;
}

void LCD_clr(void)
{
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	0e 94 7b 00 	call	0xf6	; 0xf6 <dis_cmd>
	dis_cmd(0X01);
}
 138:	08 95       	ret

0000013a <LCD_init>:
	value=(item << 4) & 0xF0;
	LCD_cmd(value);
}

void LCD_init()
{
 13a:	0f 93       	push	r16
 13c:	1f 93       	push	r17
	dis_cmd(0x02);
 13e:	82 e0       	ldi	r24, 0x02	; 2
 140:	0e 94 7b 00 	call	0xf6	; 0xf6 <dis_cmd>
	dis_cmd(0x28);
 144:	88 e2       	ldi	r24, 0x28	; 40
 146:	0e 94 7b 00 	call	0xf6	; 0xf6 <dis_cmd>
 14a:	0a ef       	ldi	r16, 0xFA	; 250
 14c:	10 e0       	ldi	r17, 0x00	; 0
 14e:	c8 01       	movw	r24, r16
 150:	01 97       	sbiw	r24, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <LCD_init+0x16>
	_delay_ms(1);
	//dis_cmd(0x01);
	_delay_ms(1);
	dis_cmd(0x0C);
 154:	c8 01       	movw	r24, r16
 156:	01 97       	sbiw	r24, 0x01	; 1
 158:	f1 f7       	brne	.-4      	; 0x156 <LCD_init+0x1c>
 15a:	8c e0       	ldi	r24, 0x0C	; 12
 15c:	0e 94 7b 00 	call	0xf6	; 0xf6 <dis_cmd>
 160:	c8 01       	movw	r24, r16
 162:	01 97       	sbiw	r24, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <LCD_init+0x28>
	_delay_ms(1);
	dis_cmd(0X06);
 166:	86 e0       	ldi	r24, 0x06	; 6
 168:	0e 94 7b 00 	call	0xf6	; 0xf6 <dis_cmd>
	dis_cmd(0x80);
 16c:	80 e8       	ldi	r24, 0x80	; 128
 16e:	0e 94 7b 00 	call	0xf6	; 0xf6 <dis_cmd>
	
}
 172:	1f 91       	pop	r17
 174:	0f 91       	pop	r16
 176:	08 95       	ret

00000178 <LCD_string>:

void LCD_string(unsigned char *str)
{
 178:	cf 93       	push	r28
 17a:	df 93       	push	r29
 17c:	ec 01       	movw	r28, r24
 17e:	02 c0       	rjmp	.+4      	; 0x184 <LCD_string+0xc>
	unsigned int x=0;
	
	while(str[x]!='\0')
	{
	dis_data(str[x]);
 180:	0e 94 5d 00 	call	0xba	; 0xba <dis_data>

void LCD_string(unsigned char *str)
{
	unsigned int x=0;
	
	while(str[x]!='\0')
 184:	89 91       	ld	r24, Y+
 186:	88 23       	and	r24, r24
 188:	d9 f7       	brne	.-10     	; 0x180 <LCD_string+0x8>
	{
	dis_data(str[x]);
	x++;
	}
}
 18a:	df 91       	pop	r29
 18c:	cf 91       	pop	r28
 18e:	08 95       	ret

00000190 <LCD_num>:
void LCD_num(unsigned int data)
{
 190:	cf 93       	push	r28
 192:	df 93       	push	r29
 194:	ec 01       	movw	r28, r24
unsigned int val;
dis_cmd(0x04);
 196:	84 e0       	ldi	r24, 0x04	; 4
 198:	0e 94 7b 00 	call	0xf6	; 0xf6 <dis_cmd>
 19c:	0e c0       	rjmp	.+28     	; 0x1ba <LCD_num+0x2a>
	while(data!=0)
	{
		val=data%10;
		dis_data(val+48);
 19e:	ce 01       	movw	r24, r28
 1a0:	6a e0       	ldi	r22, 0x0A	; 10
 1a2:	70 e0       	ldi	r23, 0x00	; 0
 1a4:	0e 94 8a 01 	call	0x314	; 0x314 <__udivmodhi4>
 1a8:	80 5d       	subi	r24, 0xD0	; 208
 1aa:	0e 94 5d 00 	call	0xba	; 0xba <dis_data>
		data=data/10;
 1ae:	ce 01       	movw	r24, r28
 1b0:	6a e0       	ldi	r22, 0x0A	; 10
 1b2:	70 e0       	ldi	r23, 0x00	; 0
 1b4:	0e 94 8a 01 	call	0x314	; 0x314 <__udivmodhi4>
 1b8:	eb 01       	movw	r28, r22
}
void LCD_num(unsigned int data)
{
unsigned int val;
dis_cmd(0x04);
	while(data!=0)
 1ba:	20 97       	sbiw	r28, 0x00	; 0
 1bc:	81 f7       	brne	.-32     	; 0x19e <LCD_num+0xe>
	{
		val=data%10;
		dis_data(val+48);
		data=data/10;
	}
dis_cmd(0x06);
 1be:	86 e0       	ldi	r24, 0x06	; 6
 1c0:	0e 94 7b 00 	call	0xf6	; 0xf6 <dis_cmd>
} 
 1c4:	df 91       	pop	r29
 1c6:	cf 91       	pop	r28
 1c8:	08 95       	ret

000001ca <main>:
void LCD_num(unsigned int);
void ADC_init(void);
unsigned int read_adc(unsigned char);

int main()
{	DDRD=0b11111111;	
 1ca:	df 92       	push	r13
 1cc:	ef 92       	push	r14
 1ce:	ff 92       	push	r15
 1d0:	0f 93       	push	r16
 1d2:	1f 93       	push	r17
 1d4:	cf 93       	push	r28
 1d6:	df 93       	push	r29
 1d8:	8f ef       	ldi	r24, 0xFF	; 255
 1da:	81 bb       	out	0x11, r24	; 17
		
		unsigned int x;
		LCD_init();
 1dc:	0e 94 9d 00 	call	0x13a	; 0x13a <LCD_init>
dis_cmd(0x06);
} 

void ADC_init(void)
{
	ADMUX=ADC_VREE_TYPE & 0xff;
 1e0:	80 e4       	ldi	r24, 0x40	; 64
 1e2:	87 b9       	out	0x07, r24	; 7
	ADCSRA=0x81;
 1e4:	81 e8       	ldi	r24, 0x81	; 129
 1e6:	86 b9       	out	0x06, r24	; 6
}

unsigned int read_adc(unsigned char adc_input)
{
	ADMUX=adc_input | (ADC_VREE_TYPE & 0xff);
 1e8:	70 e4       	ldi	r23, 0x40	; 64
 1ea:	d7 2e       	mov	r13, r23
 1ec:	64 ec       	ldi	r22, 0xC4	; 196
 1ee:	e6 2e       	mov	r14, r22
 1f0:	69 e0       	ldi	r22, 0x09	; 9
 1f2:	f6 2e       	mov	r15, r22
		LCD_init();
		
		ADC_init();
		while(1)
		{
			dis_cmd(0X80);
 1f4:	09 e1       	ldi	r16, 0x19	; 25
 1f6:	10 e0       	ldi	r17, 0x00	; 0
 1f8:	80 e8       	ldi	r24, 0x80	; 128
 1fa:	0e 94 7b 00 	call	0xf6	; 0xf6 <dis_cmd>
			LCD_string("Sensor::");
 1fe:	80 e6       	ldi	r24, 0x60	; 96
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	0e 94 bc 00 	call	0x178	; 0x178 <LCD_string>
	ADCSRA=0x81;
}

unsigned int read_adc(unsigned char adc_input)
{
	ADMUX=adc_input | (ADC_VREE_TYPE & 0xff);
 206:	d7 b8       	out	0x07, r13	; 7
 208:	c7 01       	movw	r24, r14
 20a:	01 97       	sbiw	r24, 0x01	; 1
 20c:	f1 f7       	brne	.-4      	; 0x20a <main+0x40>
	_delay_ms(10);
	ADCSRA |=0x40;
 20e:	36 9a       	sbi	0x06, 6	; 6
	while((ADCSRA & 0x10)==0);
 210:	34 9b       	sbis	0x06, 4	; 6
 212:	fe cf       	rjmp	.-4      	; 0x210 <main+0x46>
	
	return ADCW;
 214:	c4 b1       	in	r28, 0x04	; 4
 216:	d5 b1       	in	r29, 0x05	; 5
		while(1)
		{
			dis_cmd(0X80);
			LCD_string("Sensor::");
			x=read_adc(0);
			dis_cmd(0X8c);
 218:	8c e8       	ldi	r24, 0x8C	; 140
 21a:	0e 94 7b 00 	call	0xf6	; 0xf6 <dis_cmd>
			LCD_num(x);
 21e:	ce 01       	movw	r24, r28
 220:	0e 94 c8 00 	call	0x190	; 0x190 <LCD_num>
			dis_cmd(0xc1);
 224:	81 ec       	ldi	r24, 0xC1	; 193
 226:	0e 94 7b 00 	call	0xf6	; 0xf6 <dis_cmd>
			dis_cmd(0x18);
 22a:	88 e1       	ldi	r24, 0x18	; 24
 22c:	0e 94 7b 00 	call	0xf6	; 0xf6 <dis_cmd>
 230:	80 e4       	ldi	r24, 0x40	; 64
 232:	9c e9       	ldi	r25, 0x9C	; 156
 234:	f8 01       	movw	r30, r16
 236:	31 97       	sbiw	r30, 0x01	; 1
 238:	f1 f7       	brne	.-4      	; 0x236 <main+0x6c>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 23a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 23c:	d9 f7       	brne	.-10     	; 0x234 <main+0x6a>
			_delay_ms(4000);
			if(x>=414)
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	ce 39       	cpi	r28, 0x9E	; 158
 242:	d8 07       	cpc	r29, r24
 244:	20 f0       	brcs	.+8      	; 0x24e <main+0x84>
			{LCD_string("Distance:: 0.0 to 0.5cm");}
 246:	89 e6       	ldi	r24, 0x69	; 105
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	0e 94 bc 00 	call	0x178	; 0x178 <LCD_string>
			if((x>412)&&(x<=414))
 24e:	ce 01       	movw	r24, r28
 250:	8d 59       	subi	r24, 0x9D	; 157
 252:	91 40       	sbci	r25, 0x01	; 1
 254:	02 97       	sbiw	r24, 0x02	; 2
 256:	20 f4       	brcc	.+8      	; 0x260 <main+0x96>
			{LCD_string("Distance:: 0.5 to 1.0cm");}
 258:	81 e8       	ldi	r24, 0x81	; 129
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	0e 94 bc 00 	call	0x178	; 0x178 <LCD_string>
			if((x>399)&&(x<=412))
 260:	ce 01       	movw	r24, r28
 262:	80 59       	subi	r24, 0x90	; 144
 264:	91 40       	sbci	r25, 0x01	; 1
 266:	0d 97       	sbiw	r24, 0x0d	; 13
 268:	20 f4       	brcc	.+8      	; 0x272 <main+0xa8>
			{LCD_string("Distance:: 1.5 to 2.0cm");}
 26a:	89 e9       	ldi	r24, 0x99	; 153
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	0e 94 bc 00 	call	0x178	; 0x178 <LCD_string>
			if((x>391)&&(x<=399))
 272:	ce 01       	movw	r24, r28
 274:	88 58       	subi	r24, 0x88	; 136
 276:	91 40       	sbci	r25, 0x01	; 1
 278:	08 97       	sbiw	r24, 0x08	; 8
 27a:	20 f4       	brcc	.+8      	; 0x284 <main+0xba>
			{LCD_string("Distance:: 2.0 to 2.5cm");}
 27c:	81 eb       	ldi	r24, 0xB1	; 177
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	0e 94 bc 00 	call	0x178	; 0x178 <LCD_string>
			if((x>384)&&(x<=391))
 284:	ce 01       	movw	r24, r28
 286:	81 58       	subi	r24, 0x81	; 129
 288:	91 40       	sbci	r25, 0x01	; 1
 28a:	07 97       	sbiw	r24, 0x07	; 7
 28c:	20 f4       	brcc	.+8      	; 0x296 <main+0xcc>
			{LCD_string("Distance:: 2.5 to 3.0cm");}
 28e:	89 ec       	ldi	r24, 0xC9	; 201
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	0e 94 bc 00 	call	0x178	; 0x178 <LCD_string>
			if((x>359)&&(x<=384))
 296:	ce 01       	movw	r24, r28
 298:	88 56       	subi	r24, 0x68	; 104
 29a:	91 40       	sbci	r25, 0x01	; 1
 29c:	49 97       	sbiw	r24, 0x19	; 25
 29e:	20 f4       	brcc	.+8      	; 0x2a8 <main+0xde>
			{LCD_string("Distance:: 3.0 to 3.5cm");}
 2a0:	81 ee       	ldi	r24, 0xE1	; 225
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	0e 94 bc 00 	call	0x178	; 0x178 <LCD_string>
			if((x>344)&&(x<=359))
 2a8:	ce 01       	movw	r24, r28
 2aa:	89 55       	subi	r24, 0x59	; 89
 2ac:	91 40       	sbci	r25, 0x01	; 1
 2ae:	0f 97       	sbiw	r24, 0x0f	; 15
 2b0:	20 f4       	brcc	.+8      	; 0x2ba <main+0xf0>
			{LCD_string("Distance:: 3.5 to 4.0cm");}
 2b2:	89 ef       	ldi	r24, 0xF9	; 249
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	0e 94 bc 00 	call	0x178	; 0x178 <LCD_string>
			if((x>335)&&(x<=344))
 2ba:	ce 01       	movw	r24, r28
 2bc:	80 55       	subi	r24, 0x50	; 80
 2be:	91 40       	sbci	r25, 0x01	; 1
 2c0:	09 97       	sbiw	r24, 0x09	; 9
 2c2:	20 f4       	brcc	.+8      	; 0x2cc <main+0x102>
			{LCD_string("Distance:: 4.0 to 4.5cm");}
 2c4:	81 e1       	ldi	r24, 0x11	; 17
 2c6:	91 e0       	ldi	r25, 0x01	; 1
 2c8:	0e 94 bc 00 	call	0x178	; 0x178 <LCD_string>
			if((x>327)&&(x<=335))
 2cc:	ce 01       	movw	r24, r28
 2ce:	88 54       	subi	r24, 0x48	; 72
 2d0:	91 40       	sbci	r25, 0x01	; 1
 2d2:	08 97       	sbiw	r24, 0x08	; 8
 2d4:	20 f4       	brcc	.+8      	; 0x2de <main+0x114>
			{LCD_string("Distance:: 4.5 to 5.0cm");}
 2d6:	89 e2       	ldi	r24, 0x29	; 41
 2d8:	91 e0       	ldi	r25, 0x01	; 1
 2da:	0e 94 bc 00 	call	0x178	; 0x178 <LCD_string>
			if(x<=327)
 2de:	c8 54       	subi	r28, 0x48	; 72
 2e0:	d1 40       	sbci	r29, 0x01	; 1
 2e2:	08 f0       	brcs	.+2      	; 0x2e6 <main+0x11c>
 2e4:	89 cf       	rjmp	.-238    	; 0x1f8 <main+0x2e>
			{LCD_string("Distance:: 5.0 to above");}
 2e6:	81 e4       	ldi	r24, 0x41	; 65
 2e8:	91 e0       	ldi	r25, 0x01	; 1
 2ea:	0e 94 bc 00 	call	0x178	; 0x178 <LCD_string>
 2ee:	84 cf       	rjmp	.-248    	; 0x1f8 <main+0x2e>

000002f0 <ADC_init>:
	}
dis_cmd(0x06);
} 

void ADC_init(void)
{
 2f0:	80 e4       	ldi	r24, 0x40	; 64
 2f2:	87 b9       	out	0x07, r24	; 7
	ADMUX=ADC_VREE_TYPE & 0xff;
	ADCSRA=0x81;
 2f4:	81 e8       	ldi	r24, 0x81	; 129
 2f6:	86 b9       	out	0x06, r24	; 6
}
 2f8:	08 95       	ret

000002fa <read_adc>:

unsigned int read_adc(unsigned char adc_input)
{
 2fa:	80 64       	ori	r24, 0x40	; 64
 2fc:	87 b9       	out	0x07, r24	; 7
 2fe:	84 ec       	ldi	r24, 0xC4	; 196
 300:	99 e0       	ldi	r25, 0x09	; 9
 302:	01 97       	sbiw	r24, 0x01	; 1
 304:	f1 f7       	brne	.-4      	; 0x302 <read_adc+0x8>
	ADMUX=adc_input | (ADC_VREE_TYPE & 0xff);
	_delay_ms(10);
	ADCSRA |=0x40;
 306:	36 9a       	sbi	0x06, 6	; 6
	while((ADCSRA & 0x10)==0);
 308:	34 9b       	sbis	0x06, 4	; 6
 30a:	fe cf       	rjmp	.-4      	; 0x308 <read_adc+0xe>
	
	return ADCW;
 30c:	24 b1       	in	r18, 0x04	; 4
 30e:	35 b1       	in	r19, 0x05	; 5
}
 310:	c9 01       	movw	r24, r18
 312:	08 95       	ret

00000314 <__udivmodhi4>:
 314:	aa 1b       	sub	r26, r26
 316:	bb 1b       	sub	r27, r27
 318:	51 e1       	ldi	r21, 0x11	; 17
 31a:	07 c0       	rjmp	.+14     	; 0x32a <__udivmodhi4_ep>

0000031c <__udivmodhi4_loop>:
 31c:	aa 1f       	adc	r26, r26
 31e:	bb 1f       	adc	r27, r27
 320:	a6 17       	cp	r26, r22
 322:	b7 07       	cpc	r27, r23
 324:	10 f0       	brcs	.+4      	; 0x32a <__udivmodhi4_ep>
 326:	a6 1b       	sub	r26, r22
 328:	b7 0b       	sbc	r27, r23

0000032a <__udivmodhi4_ep>:
 32a:	88 1f       	adc	r24, r24
 32c:	99 1f       	adc	r25, r25
 32e:	5a 95       	dec	r21
 330:	a9 f7       	brne	.-22     	; 0x31c <__udivmodhi4_loop>
 332:	80 95       	com	r24
 334:	90 95       	com	r25
 336:	bc 01       	movw	r22, r24
 338:	cd 01       	movw	r24, r26
 33a:	08 95       	ret

0000033c <_exit>:
 33c:	f8 94       	cli

0000033e <__stop_program>:
 33e:	ff cf       	rjmp	.-2      	; 0x33e <__stop_program>
