
clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000030e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  0000030e  00000382  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  00000396  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000081  00000000  00000000  000003b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000005d4  00000000  00000000  00000437  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000187  00000000  00000000  00000a0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000004c3  00000000  00000000  00000b92  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000a0  00000000  00000000  00001058  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000f6  00000000  00000000  000010f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000020a  00000000  00000000  000011ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  000013f8  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e0       	ldi	r30, 0x0E	; 14
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a4 e7       	ldi	r26, 0x74	; 116
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 37       	cpi	r26, 0x74	; 116
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <main>
  8a:	0c 94 85 01 	jmp	0x30a	; 0x30a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000092 <LCD_cmd>:
{
	dis_cmd(0X01);
}

void LCD_cmd(unsigned char item)
{
  92:	82 bb       	out	0x12, r24	; 18
	PORTD=item;
	PORTD &=~(1<<RS);
  94:	90 98       	cbi	0x12, 0	; 18
	PORTD &=~(1<<RW);
  96:	91 98       	cbi	0x12, 1	; 18
	PORTD |= (1<<EN);
  98:	92 9a       	sbi	0x12, 2	; 18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  9a:	8a ef       	ldi	r24, 0xFA	; 250
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	01 97       	sbiw	r24, 0x01	; 1
  a0:	f1 f7       	brne	.-4      	; 0x9e <LCD_cmd+0xc>
	_delay_ms(1);
	PORTD &= ~(1<<EN);
  a2:	92 98       	cbi	0x12, 2	; 18
}
  a4:	08 95       	ret

000000a6 <LCD_data>:

void LCD_data(unsigned char item)
{
  a6:	82 bb       	out	0x12, r24	; 18
	PORTD=item;
	PORTD |= (1<<RS);
  a8:	90 9a       	sbi	0x12, 0	; 18
	PORTD &=~(1<<RW);
  aa:	91 98       	cbi	0x12, 1	; 18
	PORTD |= (1<<EN);
  ac:	92 9a       	sbi	0x12, 2	; 18
  ae:	8a ef       	ldi	r24, 0xFA	; 250
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	01 97       	sbiw	r24, 0x01	; 1
  b4:	f1 f7       	brne	.-4      	; 0xb2 <LCD_data+0xc>
	_delay_ms(1);
	PORTD &= ~(1<<EN);
  b6:	92 98       	cbi	0x12, 2	; 18
}
  b8:	08 95       	ret

000000ba <dis_data>:

void dis_data(unsigned char item)
{
  ba:	28 2f       	mov	r18, r24
  bc:	20 7f       	andi	r18, 0xF0	; 240
	PORTD &= ~(1<<EN);
}

void LCD_data(unsigned char item)
{
	PORTD=item;
  be:	22 bb       	out	0x12, r18	; 18
	PORTD |= (1<<RS);
  c0:	90 9a       	sbi	0x12, 0	; 18
	PORTD &=~(1<<RW);
  c2:	91 98       	cbi	0x12, 1	; 18
	PORTD |= (1<<EN);
  c4:	92 9a       	sbi	0x12, 2	; 18
  c6:	2a ef       	ldi	r18, 0xFA	; 250
  c8:	30 e0       	ldi	r19, 0x00	; 0
  ca:	f9 01       	movw	r30, r18
  cc:	31 97       	sbiw	r30, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <dis_data+0x12>
	_delay_ms(1);
	PORTD &= ~(1<<EN);
  d0:	92 98       	cbi	0x12, 2	; 18
  d2:	f9 01       	movw	r30, r18
  d4:	31 97       	sbiw	r30, 0x01	; 1
  d6:	f1 f7       	brne	.-4      	; 0xd4 <dis_data+0x1a>
{
	unsigned char value;
	value = item & 0XF0;
	LCD_data(value);
	_delay_ms(1);
	value=(item << 4) & 0xF0;
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	44 e0       	ldi	r20, 0x04	; 4
  dc:	88 0f       	add	r24, r24
  de:	99 1f       	adc	r25, r25
  e0:	4a 95       	dec	r20
  e2:	e1 f7       	brne	.-8      	; 0xdc <dis_data+0x22>
	PORTD &= ~(1<<EN);
}

void LCD_data(unsigned char item)
{
	PORTD=item;
  e4:	82 bb       	out	0x12, r24	; 18
	PORTD |= (1<<RS);
  e6:	90 9a       	sbi	0x12, 0	; 18
	PORTD &=~(1<<RW);
  e8:	91 98       	cbi	0x12, 1	; 18
	PORTD |= (1<<EN);
  ea:	92 9a       	sbi	0x12, 2	; 18
  ec:	c9 01       	movw	r24, r18
  ee:	01 97       	sbiw	r24, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <dis_data+0x34>
	_delay_ms(1);
	PORTD &= ~(1<<EN);
  f2:	92 98       	cbi	0x12, 2	; 18
	value = item & 0XF0;
	LCD_data(value);
	_delay_ms(1);
	value=(item << 4) & 0xF0;
	LCD_data(value);
}
  f4:	08 95       	ret

000000f6 <dis_cmd>:

void dis_cmd(unsigned char item)
{
  f6:	28 2f       	mov	r18, r24
  f8:	20 7f       	andi	r18, 0xF0	; 240
	dis_cmd(0X01);
}

void LCD_cmd(unsigned char item)
{
	PORTD=item;
  fa:	22 bb       	out	0x12, r18	; 18
	PORTD &=~(1<<RS);
  fc:	90 98       	cbi	0x12, 0	; 18
	PORTD &=~(1<<RW);
  fe:	91 98       	cbi	0x12, 1	; 18
	PORTD |= (1<<EN);
 100:	92 9a       	sbi	0x12, 2	; 18
 102:	2a ef       	ldi	r18, 0xFA	; 250
 104:	30 e0       	ldi	r19, 0x00	; 0
 106:	f9 01       	movw	r30, r18
 108:	31 97       	sbiw	r30, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <dis_cmd+0x12>
	_delay_ms(1);
	PORTD &= ~(1<<EN);
 10c:	92 98       	cbi	0x12, 2	; 18
 10e:	f9 01       	movw	r30, r18
 110:	31 97       	sbiw	r30, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <dis_cmd+0x1a>
{
	unsigned char value;
	value = item & 0XF0;
	LCD_cmd(value);
	_delay_ms(1);
	value=(item << 4) & 0xF0;
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	54 e0       	ldi	r21, 0x04	; 4
 118:	88 0f       	add	r24, r24
 11a:	99 1f       	adc	r25, r25
 11c:	5a 95       	dec	r21
 11e:	e1 f7       	brne	.-8      	; 0x118 <dis_cmd+0x22>
	dis_cmd(0X01);
}

void LCD_cmd(unsigned char item)
{
	PORTD=item;
 120:	82 bb       	out	0x12, r24	; 18
	PORTD &=~(1<<RS);
 122:	90 98       	cbi	0x12, 0	; 18
	PORTD &=~(1<<RW);
 124:	91 98       	cbi	0x12, 1	; 18
	PORTD |= (1<<EN);
 126:	92 9a       	sbi	0x12, 2	; 18
 128:	c9 01       	movw	r24, r18
 12a:	01 97       	sbiw	r24, 0x01	; 1
 12c:	f1 f7       	brne	.-4      	; 0x12a <dis_cmd+0x34>
	_delay_ms(1);
	PORTD &= ~(1<<EN);
 12e:	92 98       	cbi	0x12, 2	; 18
	value = item & 0XF0;
	LCD_cmd(value);
	_delay_ms(1);
	value=(item << 4) & 0xF0;
	LCD_cmd(value);
}
 130:	08 95       	ret

00000132 <LCD_clr>:
		}
return 0;
}

void LCD_clr(void)
{
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	0e 94 7b 00 	call	0xf6	; 0xf6 <dis_cmd>
	dis_cmd(0X01);
}
 138:	08 95       	ret

0000013a <LCD_init>:
	value=(item << 4) & 0xF0;
	LCD_cmd(value);
}

void LCD_init()
{
 13a:	0f 93       	push	r16
 13c:	1f 93       	push	r17
	dis_cmd(0x02);
 13e:	82 e0       	ldi	r24, 0x02	; 2
 140:	0e 94 7b 00 	call	0xf6	; 0xf6 <dis_cmd>
	dis_cmd(0x28);
 144:	88 e2       	ldi	r24, 0x28	; 40
 146:	0e 94 7b 00 	call	0xf6	; 0xf6 <dis_cmd>
 14a:	0a ef       	ldi	r16, 0xFA	; 250
 14c:	10 e0       	ldi	r17, 0x00	; 0
 14e:	c8 01       	movw	r24, r16
 150:	01 97       	sbiw	r24, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <LCD_init+0x16>
	_delay_ms(1);
	dis_cmd(0x01);
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	0e 94 7b 00 	call	0xf6	; 0xf6 <dis_cmd>
 15a:	c8 01       	movw	r24, r16
 15c:	01 97       	sbiw	r24, 0x01	; 1
 15e:	f1 f7       	brne	.-4      	; 0x15c <LCD_init+0x22>
	_delay_ms(1);
	dis_cmd(0x0C);
 160:	8c e0       	ldi	r24, 0x0C	; 12
 162:	0e 94 7b 00 	call	0xf6	; 0xf6 <dis_cmd>
 166:	c8 01       	movw	r24, r16
 168:	01 97       	sbiw	r24, 0x01	; 1
 16a:	f1 f7       	brne	.-4      	; 0x168 <LCD_init+0x2e>
	_delay_ms(1);
	dis_cmd(0X06);
 16c:	86 e0       	ldi	r24, 0x06	; 6
 16e:	0e 94 7b 00 	call	0xf6	; 0xf6 <dis_cmd>
	dis_cmd(0x80);
 172:	80 e8       	ldi	r24, 0x80	; 128
 174:	0e 94 7b 00 	call	0xf6	; 0xf6 <dis_cmd>
	
}
 178:	1f 91       	pop	r17
 17a:	0f 91       	pop	r16
 17c:	08 95       	ret

0000017e <LCD_string>:

void LCD_string(unsigned char *str)
{
 17e:	cf 93       	push	r28
 180:	df 93       	push	r29
 182:	ec 01       	movw	r28, r24
 184:	02 c0       	rjmp	.+4      	; 0x18a <LCD_string+0xc>
	unsigned int x=0;
	
	while(str[x]!='\0')
	{
	dis_data(str[x]);
 186:	0e 94 5d 00 	call	0xba	; 0xba <dis_data>

void LCD_string(unsigned char *str)
{
	unsigned int x=0;
	
	while(str[x]!='\0')
 18a:	89 91       	ld	r24, Y+
 18c:	88 23       	and	r24, r24
 18e:	d9 f7       	brne	.-10     	; 0x186 <LCD_string+0x8>
	{
	dis_data(str[x]);
	x++;
	}
}
 190:	df 91       	pop	r29
 192:	cf 91       	pop	r28
 194:	08 95       	ret

00000196 <LCD_num>:
void LCD_num(unsigned int data)
{
 196:	cf 93       	push	r28
 198:	df 93       	push	r29
 19a:	ec 01       	movw	r28, r24
unsigned int val;
dis_cmd(0x04);
 19c:	84 e0       	ldi	r24, 0x04	; 4
 19e:	0e 94 7b 00 	call	0xf6	; 0xf6 <dis_cmd>
 1a2:	0e c0       	rjmp	.+28     	; 0x1c0 <LCD_num+0x2a>
	while(data!=0)
	{
		val=data%10;
		dis_data(val+48);
 1a4:	ce 01       	movw	r24, r28
 1a6:	6a e0       	ldi	r22, 0x0A	; 10
 1a8:	70 e0       	ldi	r23, 0x00	; 0
 1aa:	0e 94 71 01 	call	0x2e2	; 0x2e2 <__udivmodhi4>
 1ae:	80 5d       	subi	r24, 0xD0	; 208
 1b0:	0e 94 5d 00 	call	0xba	; 0xba <dis_data>
		data=data/10;
 1b4:	ce 01       	movw	r24, r28
 1b6:	6a e0       	ldi	r22, 0x0A	; 10
 1b8:	70 e0       	ldi	r23, 0x00	; 0
 1ba:	0e 94 71 01 	call	0x2e2	; 0x2e2 <__udivmodhi4>
 1be:	eb 01       	movw	r28, r22
}
void LCD_num(unsigned int data)
{
unsigned int val;
dis_cmd(0x04);
	while(data!=0)
 1c0:	20 97       	sbiw	r28, 0x00	; 0
 1c2:	81 f7       	brne	.-32     	; 0x1a4 <LCD_num+0xe>
	{
		val=data%10;
		dis_data(val+48);
		data=data/10;
	}
dis_cmd(0x06);
 1c4:	86 e0       	ldi	r24, 0x06	; 6
 1c6:	0e 94 7b 00 	call	0xf6	; 0xf6 <dis_cmd>
} 
 1ca:	df 91       	pop	r29
 1cc:	cf 91       	pop	r28
 1ce:	08 95       	ret

000001d0 <main>:
void LCD_string(unsigned char *);
void LCD_num(unsigned int);


int main()
{	DDRD=0b11111111;	
 1d0:	cf 92       	push	r12
 1d2:	df 92       	push	r13
 1d4:	ef 92       	push	r14
 1d6:	ff 92       	push	r15
 1d8:	0f 93       	push	r16
 1da:	1f 93       	push	r17
 1dc:	cf 93       	push	r28
 1de:	df 93       	push	r29
 1e0:	8f ef       	ldi	r24, 0xFF	; 255
 1e2:	81 bb       	out	0x11, r24	; 17
		
		
		LCD_init();
 1e4:	0e 94 9d 00 	call	0x13a	; 0x13a <LCD_init>
 1e8:	80 e1       	ldi	r24, 0x10	; 16
 1ea:	97 e2       	ldi	r25, 0x27	; 39
 1ec:	29 e1       	ldi	r18, 0x19	; 25
 1ee:	30 e0       	ldi	r19, 0x00	; 0
 1f0:	f9 01       	movw	r30, r18
 1f2:	31 97       	sbiw	r30, 0x01	; 1
 1f4:	f1 f7       	brne	.-4      	; 0x1f2 <main+0x22>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1f6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1f8:	d9 f7       	brne	.-10     	; 0x1f0 <main+0x20>
 1fa:	00 e0       	ldi	r16, 0x00	; 0
 1fc:	10 e0       	ldi	r17, 0x00	; 0
 1fe:	69 e1       	ldi	r22, 0x19	; 25
 200:	c6 2e       	mov	r12, r22
 202:	d1 2c       	mov	r13, r1
 204:	6b c0       	rjmp	.+214    	; 0x2dc <main+0x10c>
		{
		for(int h=00 ;h<12;h++)
			{for(int m=00;m<60;m++)
				{for(int s=00;s<60;s++)
					{
					dis_cmd(0x80);					
 206:	80 e8       	ldi	r24, 0x80	; 128
 208:	0e 94 7b 00 	call	0xf6	; 0xf6 <dis_cmd>
					LCD_string("THE DIGITALCLOCK");		
 20c:	80 e6       	ldi	r24, 0x60	; 96
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	0e 94 bf 00 	call	0x17e	; 0x17e <LCD_string>
					dis_cmd(0xc3);
 214:	83 ec       	ldi	r24, 0xC3	; 195
 216:	0e 94 7b 00 	call	0xf6	; 0xf6 <dis_cmd>
					dis_data(48);
 21a:	80 e3       	ldi	r24, 0x30	; 48
 21c:	0e 94 5d 00 	call	0xba	; 0xba <dis_data>
						dis_cmd(0xc6);
 220:	86 ec       	ldi	r24, 0xC6	; 198
 222:	0e 94 7b 00 	call	0xf6	; 0xf6 <dis_cmd>
					LCD_string(":");
 226:	81 e7       	ldi	r24, 0x71	; 113
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	0e 94 bf 00 	call	0x17e	; 0x17e <LCD_string>
					dis_cmd(0xc7);
 22e:	87 ec       	ldi	r24, 0xC7	; 199
 230:	0e 94 7b 00 	call	0xf6	; 0xf6 <dis_cmd>
					dis_data(48);
 234:	80 e3       	ldi	r24, 0x30	; 48
 236:	0e 94 5d 00 	call	0xba	; 0xba <dis_data>
					dis_cmd(0xc9);
 23a:	89 ec       	ldi	r24, 0xC9	; 201
 23c:	0e 94 7b 00 	call	0xf6	; 0xf6 <dis_cmd>
					LCD_string(":");
 240:	81 e7       	ldi	r24, 0x71	; 113
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	0e 94 bf 00 	call	0x17e	; 0x17e <LCD_string>
					dis_cmd(0xcb);
 248:	8b ec       	ldi	r24, 0xCB	; 203
 24a:	0e 94 7b 00 	call	0xf6	; 0xf6 <dis_cmd>
					dis_data(48);
 24e:	80 e3       	ldi	r24, 0x30	; 48
 250:	0e 94 5d 00 	call	0xba	; 0xba <dis_data>
					
					


					
					dis_cmd(0x80);					
 254:	80 e8       	ldi	r24, 0x80	; 128
 256:	0e 94 7b 00 	call	0xf6	; 0xf6 <dis_cmd>
					LCD_string("THE DIGITALCLOCK");		
 25a:	80 e6       	ldi	r24, 0x60	; 96
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	0e 94 bf 00 	call	0x17e	; 0x17e <LCD_string>
					dis_cmd(0xc3);
 262:	83 ec       	ldi	r24, 0xC3	; 195
 264:	0e 94 7b 00 	call	0xf6	; 0xf6 <dis_cmd>
					LCD_num(h);
 268:	c8 01       	movw	r24, r16
 26a:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_num>
						dis_cmd(0xc6);
 26e:	86 ec       	ldi	r24, 0xC6	; 198
 270:	0e 94 7b 00 	call	0xf6	; 0xf6 <dis_cmd>
					LCD_string(":");
 274:	81 e7       	ldi	r24, 0x71	; 113
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	0e 94 bf 00 	call	0x17e	; 0x17e <LCD_string>
					dis_cmd(0xc7);
 27c:	87 ec       	ldi	r24, 0xC7	; 199
 27e:	0e 94 7b 00 	call	0xf6	; 0xf6 <dis_cmd>
					LCD_num(m);
 282:	c7 01       	movw	r24, r14
 284:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_num>
					dis_cmd(0xc9);
 288:	89 ec       	ldi	r24, 0xC9	; 201
 28a:	0e 94 7b 00 	call	0xf6	; 0xf6 <dis_cmd>
					LCD_string(":");
 28e:	81 e7       	ldi	r24, 0x71	; 113
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	0e 94 bf 00 	call	0x17e	; 0x17e <LCD_string>
					dis_cmd(0xcb);
 296:	8b ec       	ldi	r24, 0xCB	; 203
 298:	0e 94 7b 00 	call	0xf6	; 0xf6 <dis_cmd>
					LCD_num(s);
 29c:	ce 01       	movw	r24, r28
 29e:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_num>
 2a2:	80 e4       	ldi	r24, 0x40	; 64
 2a4:	9c e9       	ldi	r25, 0x9C	; 156
 2a6:	f6 01       	movw	r30, r12
 2a8:	31 97       	sbiw	r30, 0x01	; 1
 2aa:	f1 f7       	brne	.-4      	; 0x2a8 <main+0xd8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2ac:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2ae:	d9 f7       	brne	.-10     	; 0x2a6 <main+0xd6>
		
		while(1)
		{
		for(int h=00 ;h<12;h++)
			{for(int m=00;m<60;m++)
				{for(int s=00;s<60;s++)
 2b0:	21 96       	adiw	r28, 0x01	; 1
 2b2:	cc 33       	cpi	r28, 0x3C	; 60
 2b4:	d1 05       	cpc	r29, r1
 2b6:	09 f0       	breq	.+2      	; 0x2ba <main+0xea>
 2b8:	a6 cf       	rjmp	.-180    	; 0x206 <main+0x36>
		_delay_ms(1000);
		
		while(1)
		{
		for(int h=00 ;h<12;h++)
			{for(int m=00;m<60;m++)
 2ba:	08 94       	sec
 2bc:	e1 1c       	adc	r14, r1
 2be:	f1 1c       	adc	r15, r1
 2c0:	8c e3       	ldi	r24, 0x3C	; 60
 2c2:	e8 16       	cp	r14, r24
 2c4:	f1 04       	cpc	r15, r1
 2c6:	19 f0       	breq	.+6      	; 0x2ce <main+0xfe>
 2c8:	c0 e0       	ldi	r28, 0x00	; 0
 2ca:	d0 e0       	ldi	r29, 0x00	; 0
 2cc:	9c cf       	rjmp	.-200    	; 0x206 <main+0x36>
		LCD_init();
		_delay_ms(1000);
		
		while(1)
		{
		for(int h=00 ;h<12;h++)
 2ce:	0f 5f       	subi	r16, 0xFF	; 255
 2d0:	1f 4f       	sbci	r17, 0xFF	; 255
 2d2:	0c 30       	cpi	r16, 0x0C	; 12
 2d4:	11 05       	cpc	r17, r1
 2d6:	14 f0       	brlt	.+4      	; 0x2dc <main+0x10c>
 2d8:	00 e0       	ldi	r16, 0x00	; 0
 2da:	10 e0       	ldi	r17, 0x00	; 0
 2dc:	ee 24       	eor	r14, r14
 2de:	ff 24       	eor	r15, r15
 2e0:	f3 cf       	rjmp	.-26     	; 0x2c8 <main+0xf8>

000002e2 <__udivmodhi4>:
 2e2:	aa 1b       	sub	r26, r26
 2e4:	bb 1b       	sub	r27, r27
 2e6:	51 e1       	ldi	r21, 0x11	; 17
 2e8:	07 c0       	rjmp	.+14     	; 0x2f8 <__udivmodhi4_ep>

000002ea <__udivmodhi4_loop>:
 2ea:	aa 1f       	adc	r26, r26
 2ec:	bb 1f       	adc	r27, r27
 2ee:	a6 17       	cp	r26, r22
 2f0:	b7 07       	cpc	r27, r23
 2f2:	10 f0       	brcs	.+4      	; 0x2f8 <__udivmodhi4_ep>
 2f4:	a6 1b       	sub	r26, r22
 2f6:	b7 0b       	sbc	r27, r23

000002f8 <__udivmodhi4_ep>:
 2f8:	88 1f       	adc	r24, r24
 2fa:	99 1f       	adc	r25, r25
 2fc:	5a 95       	dec	r21
 2fe:	a9 f7       	brne	.-22     	; 0x2ea <__udivmodhi4_loop>
 300:	80 95       	com	r24
 302:	90 95       	com	r25
 304:	bc 01       	movw	r22, r24
 306:	cd 01       	movw	r24, r26
 308:	08 95       	ret

0000030a <_exit>:
 30a:	f8 94       	cli

0000030c <__stop_program>:
 30c:	ff cf       	rjmp	.-2      	; 0x30c <__stop_program>
